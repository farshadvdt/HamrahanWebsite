// <auto-generated />
using System;
using Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HamrahanTemplate.persistence.Migrations
{
    [DbContext(typeof(HamrahanDbContext))]
    partial class HamrahanDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Persian_100_CI_AI")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Hamrahan.Models.Class", b =>
                {
                    b.Property<byte>("Code")
                        .HasColumnType("tinyint");

                    b.Property<string>("Describtion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Code")
                        .HasName("PK_Class_Code");

                    b.ToTable("Class", "Education");
                });

            modelBuilder.Entity("Hamrahan.Models.Course", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("ClassCode")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("LessonCode")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartingDay")
                        .HasColumnType("date");

                    b.Property<string>("TeacherID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("TeacherID");

                    b.Property<string>("TimeInWeek")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("ID");

                    b.HasIndex("ClassCode");

                    b.HasIndex("LessonCode");

                    b.HasIndex("TeacherID");

                    b.ToTable("Course", "Education");
                });

            modelBuilder.Entity("Hamrahan.Models.EducationGrade", b =>
                {
                    b.Property<byte>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code")
                        .HasName("PK_Education");

                    b.ToTable("EducationGrade", "Education");
                });

            modelBuilder.Entity("Hamrahan.Models.Expenditure", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Expenditure", "Payment");
                });

            modelBuilder.Entity("Hamrahan.Models.Keyword", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Keyword", "Weblog");
                });

            modelBuilder.Entity("Hamrahan.Models.Lesson", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<byte>("EducationGradeCode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Code")
                        .HasName("PK_Lesson");

                    b.HasIndex("EducationGradeCode");

                    b.ToTable("Lesson", "Education");
                });

            modelBuilder.Entity("Hamrahan.Models.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("EducationGradecode")
                        .HasColumnType("tinyint");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EducationGradecode");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Hamrahan.Models.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagesLink")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImagesLink");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted");

                    b.Property<string>("PersonID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PersonID");

                    b.Property<DateTime>("Published")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("(getdate())", false);

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Summary");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Post", "Weblog");
                });

            modelBuilder.Entity("Hamrahan.Models.PostKeyWord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("KeywordID")
                        .HasColumnType("int")
                        .HasColumnName("KeywordID");

                    b.Property<int>("PostID")
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    b.HasKey("ID");

                    b.HasIndex("KeywordID");

                    b.HasIndex("PostID");

                    b.ToTable("PostKeyword", "Weblog");
                });

            modelBuilder.Entity("Hamrahan.Models.SalaryPayment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmployeeID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("EmployeeID");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("RemainAmount")
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("SalaryPayment", "Payment");
                });

            modelBuilder.Entity("Hamrahan.Models.StudentCourse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseID")
                        .HasColumnType("bigint")
                        .HasColumnName("CourseID");

                    b.Property<bool?>("IsRegistered")
                        .HasColumnType("bit");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentID");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("Student_course", "Education");
                });

            modelBuilder.Entity("Hamrahan.Models.StudentPayment", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseID")
                        .HasColumnType("bigint")
                        .HasColumnName("CourseID");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal?>("RemainAmount")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("StudentID");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentPayment", "Payment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Hamrahan.Models.Course", b =>
                {
                    b.HasOne("Hamrahan.Models.Class", "ClassCodeNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("ClassCode")
                        .HasConstraintName("FK_Course_ClassCode")
                        .IsRequired();

                    b.HasOne("Hamrahan.Models.Lesson", "LessonCodeNavigation")
                        .WithMany("Courses")
                        .HasForeignKey("LessonCode")
                        .HasConstraintName("FK_Course_LessonCode")
                        .IsRequired();

                    b.HasOne("Hamrahan.Models.Person", "Teacher")
                        .WithMany("Courses")
                        .HasForeignKey("TeacherID")
                        .HasConstraintName("FK_Course_TeacherId");

                    b.Navigation("ClassCodeNavigation");

                    b.Navigation("LessonCodeNavigation");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Hamrahan.Models.Lesson", b =>
                {
                    b.HasOne("Hamrahan.Models.EducationGrade", "EducationGradeCodeNavigation")
                        .WithMany("Lessons")
                        .HasForeignKey("EducationGradeCode")
                        .HasConstraintName("FK_Lesson_EducationGradeCode")
                        .IsRequired();

                    b.Navigation("EducationGradeCodeNavigation");
                });

            modelBuilder.Entity("Hamrahan.Models.Person", b =>
                {
                    b.HasOne("Hamrahan.Models.EducationGrade", "EducationGradecodeNavigation")
                        .WithMany("People")
                        .HasForeignKey("EducationGradecode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EducationGradecodeNavigation");
                });

            modelBuilder.Entity("Hamrahan.Models.Post", b =>
                {
                    b.HasOne("Hamrahan.Models.Person", "Person")
                        .WithMany("PersonPosts")
                        .HasForeignKey("PersonID")
                        .HasConstraintName("FK_Person_Post");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Hamrahan.Models.PostKeyWord", b =>
                {
                    b.HasOne("Hamrahan.Models.Keyword", "Keyword")
                        .WithMany("PostKeyWords")
                        .HasForeignKey("KeywordID")
                        .HasConstraintName("FK_Post_Keyword_KeywordID")
                        .IsRequired();

                    b.HasOne("Hamrahan.Models.Post", "Post")
                        .WithMany("PostKeyWords")
                        .HasForeignKey("PostID")
                        .HasConstraintName("FK_Post_Keyword_PostID")
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hamrahan.Models.SalaryPayment", b =>
                {
                    b.HasOne("Hamrahan.Models.Person", "Employee")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("EmployeeID")
                        .HasConstraintName("FK_SalaryPayment_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Hamrahan.Models.StudentCourse", b =>
                {
                    b.HasOne("Hamrahan.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseID")
                        .HasConstraintName("FK_Student_course_Course")
                        .IsRequired();

                    b.HasOne("Hamrahan.Models.Person", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentID")
                        .HasConstraintName("FK__Student_c__Stude__5070F446");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Hamrahan.Models.StudentPayment", b =>
                {
                    b.HasOne("Hamrahan.Models.Course", "Course")
                        .WithMany("StudentPayments")
                        .HasForeignKey("CourseID")
                        .HasConstraintName("FK__StudentPa__Cours__5535A963")
                        .IsRequired();

                    b.HasOne("Hamrahan.Models.Person", "Student")
                        .WithMany("StudentPayments")
                        .HasForeignKey("StudentID")
                        .HasConstraintName("FK_StudentPayment_Student");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Hamrahan.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Hamrahan.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hamrahan.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Hamrahan.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hamrahan.Models.Class", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Hamrahan.Models.Course", b =>
                {
                    b.Navigation("StudentCourses");

                    b.Navigation("StudentPayments");
                });

            modelBuilder.Entity("Hamrahan.Models.EducationGrade", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("People");
                });

            modelBuilder.Entity("Hamrahan.Models.Keyword", b =>
                {
                    b.Navigation("PostKeyWords");
                });

            modelBuilder.Entity("Hamrahan.Models.Lesson", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Hamrahan.Models.Person", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("PersonPosts");

                    b.Navigation("SalaryPayments");

                    b.Navigation("StudentCourses");

                    b.Navigation("StudentPayments");
                });

            modelBuilder.Entity("Hamrahan.Models.Post", b =>
                {
                    b.Navigation("PostKeyWords");
                });
#pragma warning restore 612, 618
        }
    }
}
